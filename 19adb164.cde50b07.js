(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{119:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,m=p["".concat(o,".").concat(u)]||p[u]||b[u]||i;return n?a.a.createElement(m,l(l({ref:t},c),{},{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),i=(n(0),n(119)),o={id:"indexer",title:"Set Up the Lumos Indexer"},l={unversionedId:"tutorials/indexer",id:"tutorials/indexer",isDocsHomePage:!1,title:"Set Up the Lumos Indexer",description:"Lumos is designed based on the Index-Query-Assemble pattern. The Lumos indexer polls blocks from a CKB node, indexes them and stores the indexed data in a local database to provide optimal query.",source:"@site/docs\\tutorials\\indexer.md",slug:"/tutorials/indexer",permalink:"/lumos_doc/docs/tutorials/indexer",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/indexer.md",version:"current",sidebar:"someSidebar",previous:{title:"Set Up the Config Manager",permalink:"/lumos_doc/docs/tutorials/config"},next:{title:"Query on Cells",permalink:"/lumos_doc/docs/tutorials/querycells"}},s=[{value:"Environment",id:"environment",children:[]},{value:"Set Up the RocksDB Backed Indexer",id:"set-up-the-rocksdb-backed-indexer",children:[{value:"Step 1. Install the indexer package.",id:"step-1-install-the-indexer-package",children:[]},{value:"Step 2. Start the indexer.",id:"step-2-start-the-indexer",children:[]}]},{value:"Set Up the SQL Backed Indexer",id:"set-up-the-sql-backed-indexer",children:[{value:"Step 1. Create a PostgreSQL instance.",id:"step-1-create-a-postgresql-instance",children:[]},{value:"Step 2. Clone the Lumos repository to initialize the SQL database.",id:"step-2-clone-the-lumos-repository-to-initialize-the-sql-database",children:[]},{value:"Step 3. Check the Current Indexed Tip",id:"step-3-check-the-current-indexed-tip",children:[]}]},{value:"Install the Pre-built Native Module for Electron Applications",id:"install-the-pre-built-native-module-for-electron-applications",children:[]}],c={toc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Lumos is designed based on the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"}),Object(i.b)("inlineCode",{parentName:"a"},"Index-Query-Assemble"))," pattern. The Lumos indexer polls blocks from a CKB node, indexes them and stores the indexed data in a local database to provide optimal query."),Object(i.b)("p",null,"Lumos provides the following two types of indexers:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The RocksDB backed indexer: The RocksDB backed indexer is contained in the  ",Object(i.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer")," package. After the ",Object(i.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer")," package is installed, the RocksDB backed indexer can be used directly."),Object(i.b)("li",{parentName:"ul"},"The SQL backed indexer: The Lumos indexer supports the SQL database of the latest stable versions of PostgreSQL and MySQL. A separate package, the ",Object(i.b)("inlineCode",{parentName:"li"},"@ckb-lumos/sql-indexer")," package contains the SQL backed indexer. Specific SQL database settings are required before using the SQL backed indexer. ")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note"),":  The usage for the SQL backed indexer is not fully verified. It is still in the experimental stage."),Object(i.b)("h2",{id:"environment"},"Environment"),Object(i.b)("p",null,"The Lumos indexer can be set up in a DApp on all major platforms, including Linux, Windows and macOS."),Object(i.b)("p",null,"The following examples are verified on Ubuntu 20.04.2. Steps on the other platforms are similar and can be adjusted accordingly."),Object(i.b)("h2",{id:"set-up-the-rocksdb-backed-indexer"},"Set Up the RocksDB Backed Indexer"),Object(i.b)("p",null,"The following prerequisites apply for setting up the RocksDB backed indexer:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Node.js and Yarn are installed."),Object(i.b)("li",{parentName:"ul"},"Dependencies for build tools are installed.")),Object(i.b)("h3",{id:"step-1-install-the-indexer-package"},"Step 1. Install the indexer package."),Object(i.b)("p",null,"The following example installs the RocksDB backed indexer as a dependency for a project."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ cd mydapp\n$ yarn add @ckb-lumos/indexer\n")),Object(i.b)("h3",{id:"step-2-start-the-indexer"},"Step 2. Start the indexer."),Object(i.b)("p",null,"The following example starts the RocksDB backed indexer. The default RPC URL of the local CKB node is ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"http://127.0.0.1:8114"}),"http://127.0.0.1:8114"),". "),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="mydapp/src/index.ts"',title:'"mydapp/src/index.ts"'}),'import { Indexer } from "@ckb-lumos/indexer";\nconst CKB_RPC = "http://127.0.0.1:8114";\nconst INDEXER = new Indexer(CKB_RPC, "./indexed-data");\nINDEXER.startForever();\n')),Object(i.b)("h2",{id:"set-up-the-sql-backed-indexer"},"Set Up the SQL Backed Indexer"),Object(i.b)("p",null,"To be Updated..."),Object(i.b)("p",null,"The following prerequisites apply for setting up the SQL backed indexer:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Node.js and Yarn are installed."),Object(i.b)("li",{parentName:"ul"},"Dependencies for build tools are installed."),Object(i.b)("li",{parentName:"ul"},"Docker is installed. For more information about Docker installation, see ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://docs.docker.com/engine/install/"}),"Install Docker Engine"),".")),Object(i.b)("h3",{id:"step-1-create-a-postgresql-instance"},"Step 1. Create a PostgreSQL instance."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ docker run --name postgres -e POSTGRES_USER=user -e POSTGRES_DB=lumos -e POSTGRES_PASSWORD=password -d -p 5432:5432 postgres\n")),Object(i.b)("h3",{id:"step-2-clone-the-lumos-repository-to-initialize-the-sql-database"},"Step 2. Clone the Lumos repository to initialize the SQL database."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ cd $TOP\n$ git clone --recursive https://github.com/nervosnetwork/lumos\n$ cd lumos && git checkout v0.15.0\n$ yarn\n$ cd packages/sql-indexer\n$ cat << EOF > knexfile.js\nmodule.exports = {\n  development: {\n    client: 'postgresql',\n    connection: {\n      database: 'lumos',\n      user:     'user',\n      password: 'password'\n    },\n    pool: {\n      min: 2,\n      max: 10\n    },\n    migrations: {\n      tableName: 'knex_migrations'\n    }\n  }\n};\nEOF\n$ npx knex migrate:up\n")),Object(i.b)("h3",{id:"step-3-check-the-current-indexed-tip"},"Step 3. Check the Current Indexed Tip"),Object(i.b)("p",null,"To check the current indexed tip after the indexer is started:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),'> const { Indexer, CellCollector, TransactionCollector } = require("@ckb-lumos/sql-indexer");\n> const indexer = new Indexer("http://127.0.0.1:5432", "/tmp/indexed-data");\n> indexer.startForever();\n> await indexer.tip()\n{\n  block_number: \'0x0\',\n  block_hash: \'0x120ab9abd48e3b82f93b88eba8c50a0e1304cc2fffb5573fb14b56c6348f2305\'\n}\n')),Object(i.b)("h2",{id:"install-the-pre-built-native-module-for-electron-applications"},"Install the Pre-built Native Module for Electron Applications"),Object(i.b)("p",null,"The Lumos indexer is based on the CKB indexer that is developed by Rust. To leverage the native Rust code without installing Rust, Lumos provides the Lumos indexer with a pre-built native module of the CKB indexer."),Object(i.b)("p",null,"To install the pre-built native module of the CKB indexer for Electron applications: "),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ LUMOS_NODE_RUNTIME=electron npm i\n")))}d.isMDXComponent=!0}}]);