(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{125:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=r.a.createContext({}),b=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||c;return n?r.a.createElement(m,s(s({ref:t},i),{},{components:n})):r.a.createElement(m,s({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var i=2;i<c;i++)o[i]=n[i];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},128:function(e,t,n){"use strict";n.d(t,"b",(function(){return c})),n.d(t,"a",(function(){return o}));var a=n(22),r=n(129);function c(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(a.default)();return{withBaseUrl:(n,a)=>function(e,t,n,{forcePrependBaseUrl:a=!1,absolute:c=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(r.b)(n))return n;if(a)return t+n;const o=n.startsWith(t)?n:t+n.replace(/^\//,"");return c?e+o:o}(t,e,n,a)}}function o(e,t={}){const{withBaseUrl:n}=c();return n(e,t)}},129:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}))},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),c=(n(0),n(125)),o=n(128),s={id:"manageaccounts",title:"Manage Accounts"},l={unversionedId:"tutorials/manageaccounts",id:"tutorials/manageaccounts",isDocsHomePage:!1,title:"Manage Accounts",description:"Lumos also provides the functions to manage the keys, addresses and the lock script of a CKB Account.",source:"@site/docs\\tutorials\\manageaccounts.md",slug:"/tutorials/manageaccounts",permalink:"/lumos_doc/docs/tutorials/manageaccounts",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/manageaccounts.md",version:"current",lastUpdatedAt:1619188968,sidebar:"sidebar2",previous:{title:"Assemble Transactions",permalink:"/lumos_doc/docs/tutorials/buildtransactions"},next:{title:"DApps on CKB Workshop Code",permalink:"/lumos_doc/docs/tutorials/integratenft"}},i=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Environment",id:"environment",children:[]},{value:"Examples",id:"examples",children:[{value:"Generate Extended Keys",id:"generate-extended-keys",children:[]},{value:"Generate the Public Key from a Private Key",id:"generate-the-public-key-from-a-private-key",children:[]},{value:"Generate Args from a Public Key",id:"generate-args-from-a-public-key",children:[]},{value:"Recover the Public Key from a Signature and a Signed Message",id:"recover-the-public-key-from-a-signature-and-a-signed-message",children:[]},{value:"Generate a Keystore File",id:"generate-a-keystore-file",children:[]},{value:"Generate an XPub Key File from an Extended Private Key",id:"generate-an-xpub-key-file-from-an-extended-private-key",children:[]},{value:"Get the Balance by Using the HD Cache Manager",id:"get-the-balance-by-using-the-hd-cache-manager",children:[]},{value:"Generate the Address from a Lock Script",id:"generate-the-address-from-a-lock-script",children:[]},{value:"Get the Lock Script from an Address",id:"get-the-lock-script-from-an-address",children:[]},{value:"Generate the Lock Hash from a Lock Script",id:"generate-the-lock-hash-from-a-lock-script",children:[]},{value:"Generate an Account from a Private Key",id:"generate-an-account-from-a-private-key",children:[]}]}],b={toc:i};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Lumos also provides the functions to manage the keys, addresses and the lock script of a ",Object(c.b)("a",{parentName:"p",href:"../preparation/createaccount#ckb-account"},"CKB Account"),"."),Object(c.b)("p",null,"The following figure shows the Lumos functions for the conversion between private key, public key, Lock Script, and CKB address."),Object(c.b)("img",{src:Object(o.a)("img/conversion.png")}),Object(c.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(c.b)("p",null,"The following prerequisites apply for the examples in this guide:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"The development environment is set up. For more information, see ",Object(c.b)("a",{parentName:"li",href:"http://localhost:3000/lumos_doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),"."),Object(c.b)("li",{parentName:"ul"},"The CKB node is installed and started on DEV chain. For more information, see ",Object(c.b)("a",{parentName:"li",href:"http://localhost:3000/lumos_doc/docs/preparation/installckb"},"Install a CKB Node"),"."),Object(c.b)("li",{parentName:"ul"},"The Lumos packages (",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/base"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/helpers"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/config-manager"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/hd"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/hd-cache"),") are installed.")),Object(c.b)("h2",{id:"environment"},"Environment"),Object(c.b)("p",null,"The following examples are verified on Ubuntu 20.04.2. Steps on the other platforms can be adjusted accordingly."),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("h3",{id:"generate-extended-keys"},"Generate Extended Keys"),Object(c.b)("p",null,"The HD wallet manager (",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/hd"),") provides the following functions for generating extended keys based on BIP-39:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/nervosnetwork/lumos/blob/develop/packages/hd/src/mnemonic/index.ts#L173"},"mnemonic.generateMnemonic"),": Generates mnemonic words (12 words)."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/mnemonic/index.ts#L48"},"mnemonic.mnemonicToSeedSync"),": Generates a seed from mnemonic words."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/extended_key.ts#L133"},"ExtendedPrivateKey.fromSeed"),": Generates an extended private key from a seed."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",{parentName:"li",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/extended_key.ts#L113"},"ExtendedPrivateKey.toExtendedPublicKey"),": Generates an extended public key from an extended private key.")),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateKey()" {4,6,7,10}',title:'"hellolumos/src/manageaccounts.ts/generateKey()"',"{4,6,7,10}":!0},'import { mnemonic, ExtendedPrivateKey } from "@ckb-lumos/hd";\n\nexport async function generateKey(){\n  const m = mnemonic.generateMnemonic();\n  console.log("The mnemonic is",m);\n  const seed = mnemonic.mnemonicToSeedSync(m);\n  const extendedPrivateKey = ExtendedPrivateKey.fromSeed(seed);\n  console.log(extendedPrivateKey);\n  \n  const publickey = extendedPrivateKey.toExtendedPublicKey().publicKey;\n  console.log("The public key is", publickey);\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"generateKey")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,4,6}","{1,4,6}":!0},"$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, manageaccounts}=require(\".\");\nThe server is started.\n> await manageaccounts.generateKey();\nThe mnemonic is put sweet bomb route thrive version evoke about excite pumpkin voyage tragic\nExtendedPrivateKey {\n  privateKey: '0xb0551ab24a366ae15fe8cbf450d275ed5c5dd72f2a8de0fbc74072230c05aa6c',\n  chainCode: '0x821f8011f21b00a82c832f1208367e31456bc81a7c1909e01d337a240bd629ed'\n}\nThe public key is 0x022186277d6626f615ec926d1a5c79ba7d6dd459e27597b68c4797e45336a2ba20\n")))),Object(c.b)("h3",{id:"generate-the-public-key-from-a-private-key"},"Generate the Public Key from a Private Key"),Object(c.b)("p",null,"The key module of the ",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/hd")," package supports producing a public key from a private key based on the secp256k1 standard."),Object(c.b)("p",null,"The following example uses the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/key.ts#L51"},"key.privateToPublic")," function to generate the public key from a private key."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/private2Public()" {6}',title:'"hellolumos/src/manageaccounts.ts/private2Public()"',"{6}":!0},'import { key } from "@ckb-lumos/hd";\n\nexport async function private2Public (\n  privatekey: HexString\n):Promise<HexString> {\n  const pubkey = key.privateToPublic(privatekey);\n  \n  console.log("The public key is",pubkey);\n  return pubkey;\n}\n')),Object(c.b)("h3",{id:"generate-args-from-a-public-key"},"Generate Args from a Public Key"),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/key.ts#L70"},"key.publicKeyToBlake160")," function uses blake160 that extracts the first 20 bytes of a public key hash to generate the args."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/public2Args()" {6}',title:'"hellolumos/src/manageaccounts.ts/public2Args()"',"{6}":!0},'import { key } from "@ckb-lumos/hd";\n\nexport async function public2Args (\n  publicKey: HexString\n):Promise<string> {\n  const args = key.publicKeyToBlake160(publicKey);\n  \n  console.log("The args is",args);\n  return args;\n}\n')),Object(c.b)("h3",{id:"recover-the-public-key-from-a-signature-and-a-signed-message"},"Recover the Public Key from a Signature and a Signed Message"),Object(c.b)("p",null,"Signatures are based on elliptic curve private/public key pairs. The public key is recoverable from the signature. "),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/key.ts#L27"},"key.recoverFromSignature")," function can recover the public key from a signature and a signed message."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/signature2PublicKey()" {7}',title:'"hellolumos/src/manageaccounts.ts/signature2PublicKey()"',"{7}":!0},'import { key } from "@ckb-lumos/hd";\n\nexport async function signature2PublicKey (\n  message: HexString,\n  signature: HexString\n):Promise<HexString> {\n  const pubkey = key.recoverFromSignature(message,signature);\n  \n  console.log("The public key is",pubkey);\n  return pubkey;\n  \n}\n')),Object(c.b)("h3",{id:"generate-a-keystore-file"},"Generate a Keystore File"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"A keystore file provides storage for keys. The ckb-cli tool or wallets like the ",Object(c.b)("a",{parentName:"p",href:"https://docs.nervos.org/docs/basics/guides/neuron#3-create-a-new-wallet-or-import-existing-keystore-file-or-seed-phrase-to-the-neuron-wallet"},"Neuron Wallet")," can import keystore files to recover the wallets.")),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/keystore.ts#L55"},"Keystore")," module of the ",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/hd")," package supports to generate keystore files froma private key and a password that encrypts the keystore file. "),Object(c.b)("p",null,"The following example generates a keystore with an extended private key by using the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/keystore.ts#L144"},"Keystore.create")," function, and then saves the keystore file by using the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/keystore.ts#L92"},"Keystore.save")," function. The default name for the keystore file is ",Object(c.b)("inlineCode",{parentName:"p"},"${id}.json"),"."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateKeystore()" {14,15}',title:'"hellolumos/src/manageaccounts.ts/generateKeystore()"',"{14,15}":!0},'import { Keystore } from "@ckb-lumos/hd";\n\nexport async function generateKeystore(\n  password: string,\n  path: string,\n  name: string,\n  overwrite: boolean | undefined\n  ){\n    const m = mnemonic.generateMnemonic();\n    console.log("The mnemonic is",m);\n    const seed = mnemonic.mnemonicToSeedSync(m);\n    const extendedPrivateKey = ExtendedPrivateKey.fromSeed(seed);\n    console.log("The extendedPrivateKey is", extendedPrivateKey);\n    const keystore = Keystore.create(extendedPrivateKey,password);\n    keystore.save(path,{name, overwrite});\n  }\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"generateKeystore")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,4,6}","{1,4,6}":!0},'$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts}=require(".");\nThe server is started.\n> await manageaccounts.generateKeystore("test","C:\\\\test","keystore.json",true);\nThe mnemonic is catalog hero they audit liquid struggle topic enter cotton expire sugar cause\nThe extendedPrivateKey is ExtendedPrivateKey {\n  privateKey: \'0x641e26e91e605740b62aa678816af5b82591e977648a90f8d556f4e39962178c\',\n  chainCode: \'0x25a4c28fcdf5a74789536e5f368f931436ee70e38537e7e305db4bd497b732e8\'\n}\n')))),Object(c.b)("h3",{id:"generate-an-xpub-key-file-from-an-extended-private-key"},"Generate an XPub Key File from an Extended Private Key"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"An xPub Key (extended public key) can be used to derive a unique address for every transaction.")),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd/src/xpub_store.ts#L4"},"XPubStore")," class of the ",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/hd")," package supports to generate xPub key files from extended private keys."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateXpubStore()" {9,10}',title:'"hellolumos/src/manageaccounts.ts/generateXpubStore()"',"{9,10}":!0},'import { ExtendedPrivateKey, XPubStore } from "@ckb-lumos/hd";\n\nexport async function generateXPubStore(\n    extendedPrivateKey: ExtendedPrivateKey,\n    path: string,\n    overwrite: boolean | undefined\n  ){\n    const accountExtendedPublicKey = extendedPrivateKey.toAccountExtendedPublicKey();\n    const xpubstore = new XPubStore(accountExtendedPublicKey);\n    xpubstore.save(path,{overwrite});\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"generateXPubStore")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript",metastring:"{1,4,6-10}","{1,4,6-10}":!0},'$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts}=require(".");\nThe server is started.\n> const {ExtendedPrivateKey}=require("@ckb-lumos/hd");\n> const privateKey="0x5503cc1d40b9e05a46fe8e1d4702786c624a1b5e774f964db6746ea754b4843a";\n> const chainCode = "0x568e6eba7d3be6edf051d5de2e0384637c82f1a2e5bab56f5431b2978bd73a27";\n> const extendedPrivateKey = new ExtendedPrivateKey(privateKey,chainCode);\n> await manageaccounts.generateXPubStore(extendedPK,"C:\\\\xpub",true);\n>//The example generates a xpub file under the C:\\ disk.\n>//The generated content of this example is "{"xpubkey":"027f5e9f79ff3739990a0a4581304d3128cbe0f22ee6274c6601defc87c04986cbcd1efd7be4123e6cd9d15a434407661b30b570ef0b9d444553cfec4527ec8ee3"}".\n')))),Object(c.b)("h3",{id:"get-the-balance-by-using-the-hd-cache-manager"},"Get the Balance by Using the HD Cache Manager"),Object(c.b)("p",null,"A DApp can serve queries on HD wallets in an efficient way by using the HD cache manager (",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/hd-cache"),") component that can store the following data of an HD wallet:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"The master public key"),Object(c.b)("li",{parentName:"ul"},"The next receiving public key"),Object(c.b)("li",{parentName:"ul"},"The next change public key"),Object(c.b)("li",{parentName:"ul"},"The receiving keys"),Object(c.b)("li",{parentName:"ul"},"The change keys"),Object(c.b)("li",{parentName:"ul"},"The balance of the HD wallet")),Object(c.b)("p",null,"The HD cache manager can load the data of HD wallets from mnemonic words with the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd-cache/src/index.ts#L605"},"CacheManager.fromMnemonic")," function or from a keystore file with the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd-cache/src/index.ts#L571"},"CacheManager.loadFromKeystore")," function."),Object(c.b)("p",null,"If the keystore file is generated by the ckb-cli tool (the keystore file contains ",Object(c.b)("inlineCode",{parentName:"p"},'"origin":"ckb-cli"'),"), or the ",Object(c.b)("var",null,"needMasterPublicKey")," variable is set as ",Object(c.b)("var",null,"true"),", the HD cache manager loads the data for all keys including the master public key."),Object(c.b)("p",null,"The following example loads the data from a keystore file of an HD wallet, and then uses the ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/hd-cache/src/index.ts#L767"},"getBalance")," function to get the balance of the HD wallet. "),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/mydapp/src/manageaccounts.ts/getBalancebyHDCache()" {14}',title:'"/mydapp/src/manageaccounts.ts/getBalancebyHDCache()"',"{14}":!0},'export async function getBalancebyHDCache (\n  path:string,\n  password: string,\n  needMasterPublicKey: boolean\n )  {\n   const cacheManager = CacheManager.loadFromKeystore(INDEXER, path, password,getDefaultInfos(),{needMasterPublicKey}); \n   cacheManager.startForever();\n  //  console.log("The master public key info is", cacheManager.getMasterPublicKeyInfo());\n  //  console.log("The next receiving public key info is", cacheManager.getNextReceivingPublicKeyInfo());\n  //  console.log("The next change public key info is",cacheManager.getNextChangePublicKeyInfo());\n  //  console.log("The receiving keys are",cacheManager.getReceivingKeys());\n  //@ts-ignore\n  await cacheManager.cache.loop();\n  const balance = await getBalance(new CellCollector(cacheManager));\n  console.log("The HD wallet balance is", BigInt(balance));\n }\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"getBalancebyHDCache")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript",metastring:"{1,4,7,10}","{1,4,7,10}":!0},'$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts }=require(".");\nThe server is started.\n// Set the needMasterPublicKey variable as false to get the balance for all keys except the master public key\n> await manageaccounts.getBalancebyHDCache("C:\\\\test\\\\keystore","test", false);\nThe HD wallet balance is 40000000000n\n// Set the needMasterPublicKey variable as true to get the balance for all keys including the master public key\n> await manageaccounts.getBalancebyHDCache("C:\\\\test\\\\keystore","test", true);\nThe HD wallet balance is 2833614223561041n\n')))),Object(c.b)("h3",{id:"generate-the-address-from-a-lock-script"},"Generate the Address from a Lock Script"),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/helpers/src/index.ts#L89"},"generateAddress")," function of the ",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")," package can be used to generate the address from a specific lock script."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateAddressfromLock()" {7}',title:'"hellolumos/src/manageaccounts.ts/generateAddressfromLock()"',"{7}":!0},'import { generateAddress } from "@ckb-lumos/helpers";\n\nexport async function generateAddressfromLock(\n  lockScript:Script,\n  config: Config\n)  {\n  const address = generateAddress(lockScript, {config});\n  console.log("The address for the lockscript is", address);  \n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"generateAddressfromLock")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-bash",metastring:"{1,4,6-9}","{1,4,6-9}":!0},'$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { accounts, manageaccounts, CONFIG}=require(".");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress }=require("@ckb-lumos/helpers");\n> const script = parseAddress(alice.ADDRESS);\n> const address = await manageaccounts.generateAddressfromLock(script,CONFIG);\nThe address for the lockscript is ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf\n')))),Object(c.b)("h3",{id:"get-the-lock-script-from-an-address"},"Get the Lock Script from an Address"),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/helpers/src/index.ts#L145"},"parseAddress")," function of the ",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")," package can be used to get the lock script from an address."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generatelockFromAddress()" {6}',title:'"hellolumos/src/manageaccounts.ts/generatelockFromAddress()"',"{6}":!0},'import { parseAddress } from "@ckb-lumos/helpers";\n\nexport async function generateLockFromAddress (\n  address:Address\n)  {\n  const lockscript = parseAddress(address);\n  console.log("The lockscript of the address is", lockscript);  \n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"generatelockFromAddress")," function in the Node.js REPL mode: "),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,4,6,7}","{1,4,6,7}":!0},"$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, manageaccounts }=require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> await manageaccounts.generateLockFromAddress(alice.ADDRESS);\nThe lockscript of the address is {\n  code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n  hash_type: 'type',\n  args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n}\n")))),Object(c.b)("h3",{id:"generate-the-lock-hash-from-a-lock-script"},"Generate the Lock Hash from a Lock Script"),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos/blob/c3bd18e6baac9c283995f25d226a689970dc9537/packages/base/lib/utils.js#L73"},"computeScriptHash")," function generates the hash value for a specific lock script."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateLockHash()" {7}',title:'"hellolumos/src/manageaccounts.ts/generateLockHash()"',"{7}":!0},'import { utils } from "@ckb-lumos/base";\nconst {  computeScriptHash } = utils;\n\nexport async function generateLockHash(\n  lock:Script\n  ){\n    const lockHash = computeScriptHash(lock);\n    console.log("The lockHash is", lockHash);\n}\n')),Object(c.b)("h3",{id:"generate-an-account-from-a-private-key"},"Generate an Account from a Private Key"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateAccountFromPrivateKey()"',title:'"hellolumos/src/manageaccounts.ts/generateAccountFromPrivateKey()"'},'import { parseAddress} from "@ckb-lumos/helpers";\nimport { utils, Address, Hash, Script, HexString } from "@ckb-lumos/base";\nconst { computeScriptHash } = utils;\nimport { key } from "@ckb-lumos/hd";\n\nexport type Account = {\n  lockScript: Script;\n  lockHash: Hash;\n  address: Address;\n  pubKey: string;\n  lockScriptMeta?: any;\n}\nexport const generateAccountFromPrivateKey = (privKey: string): Account => {\n  const pubKey = key.privateToPublic(privKey);\n  const args = key.publicKeyToBlake160(pubKey);\n  const template = CONFIG.SCRIPTS["SECP256K1_BLAKE160"]!\n  const lockScript = {    \n    code_hash: template.CODE_HASH,\n    hash_type: template.HASH_TYPE,\n    args: args\n  };\n  const address = generateAddress(lockScript);\n  const lockHash = computeScriptHash(lockScript);\n  return {\n    lockScript,\n    lockHash,\n    address,\n    pubKey,\n  }\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"generateAccountFromPrivateKey")," function in the Node.js REPL mode: "),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,4,6,7}","{1,4,6,7}":!0},"$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, manageaccounts }=require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> await manageaccounts.generateAccountFromPrivateKey(alice.PRIVATE_KEY);\n{\n  lockScript: {\n    code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n    hash_type: 'type',\n    args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n  },\n  lockHash: '0xf6ea009a4829de7aeecd75f3ae6bcdbaacf7328074ae52a48456a8793a4b1cca',\n  address: 'ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf',\n  pubKey: '0x02963f88be6c4163a68abf0539facdfc2a77064c6091f618953a230caeacf5237e'\n}\n")))))}u.isMDXComponent=!0}}]);