(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{102:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return h}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(r),d=n,h=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return r?a.a.createElement(h,s(s({ref:t},l),{},{components:r})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},82:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),o=(r(0),r(102)),i={id:"ckbdapps",title:"Developing CKB DApps with Lumos"},s={unversionedId:"quickstart/ckbdapps",id:"quickstart/ckbdapps",isDocsHomePage:!1,title:"Developing CKB DApps with Lumos",description:"Prerequisites",source:"@site/docs\\quickstart\\ckbdapps.md",slug:"/quickstart/ckbdapps",permalink:"/lumos_doc/docs/quickstart/ckbdapps",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/quickstart/ckbdapps.md",version:"current"},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"How Lumos Fits in with CKB DApps",id:"how-lumos-fits-in-with-ckb-dapps",children:[]},{value:"Transaction Flow",id:"transaction-flow",children:[]},{value:"How Lumos Fits in with CKB DApps",id:"how-lumos-fits-in-with-ckb-dapps-1",children:[]}],l={toc:c};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.b)("p",null,"The following essential knowledge are required for using Lumos to develop CKB DApps:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Basic knowledge of Nervos CKB",": For more details about the common knowledge of Nervos CKB, see ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://docs.nervos.org/docs/basics/introduction"}),"Nervos CKB Basics"),"."),Object(o.b)("li",{parentName:"ul"},"CKB Data Model: For more details about the CKB data model, see ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://docs.nervos.org/docs/reference/introduction"}),"Nervos CKB Reference")," and ",Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md"}),"CKB Data Structure"),".")),Object(o.b)("h2",{id:"how-lumos-fits-in-with-ckb-dapps"},"How Lumos Fits in with CKB DApps"),Object(o.b)("p",null,"CKB DApps are designed based on the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"}),"index-query-assemble")," pattern including a cell indexer, a cell querier and a transaction generator."),Object(o.b)("p",null,"The Lumos framework wraps up the functionalities that a CKB DApp requires:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Cell Indexer"),": The Lumos indexer (",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer")," or",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/sql-indexer"),") is used to maintain a local database of cells."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Cell Querier"),": Cells satisfying some criteria are collected from the local database through ",Object(o.b)("inlineCode",{parentName:"li"},"CellCollector")," to respond to queries."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Transaction Generator"),": A new transaction can be assembled based on the queried cells through ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/common-scripts")," and ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/helpers"),".")),Object(o.b)("img",{src:"../../img/CKB dapp with Lumos.png"}),Object(o.b)("h2",{id:"transaction-flow"},"Transaction Flow"),Object(o.b)("p",null,"The goal of a DApp is to achieve correct transactions. The transaction flow in a CKB DApp can have the following steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"The user performs a transaction action on the client. In response of the action, the client requests the server to generate the transaction."),Object(o.b)("li",{parentName:"ol"},"The server uses a local database generate the transaction and forwards the raw transaction to the client."),Object(o.b)("li",{parentName:"ol"},"The client acquires signature from the wallet."),Object(o.b)("li",{parentName:"ol"},"The wallet signs the transaction with the signature and sends it to the client."),Object(o.b)("li",{parentName:"ol"},"The client forwards the transaction with the signature to the server."),Object(o.b)("li",{parentName:"ol"},"The server send the transaction with the signature to the CKB node."),Object(o.b)("li",{parentName:"ol"},"The CKB node returns the transaction hash to the server."),Object(o.b)("li",{parentName:"ol"},"The server can forward the transaction hash to the client. The server and the client keep track of the transaction hash to see the transaction status on-chain.")),Object(o.b)("p",null,"The following figure shows the transaction flow between the components of a CKB DApp."),Object(o.b)("img",{src:"../../img/transaction flow.png"}),Object(o.b)("h2",{id:"how-lumos-fits-in-with-ckb-dapps-1"}))}p.isMDXComponent=!0}}]);