(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,m=p["".concat(s,".").concat(b)]||p[b]||u[b]||o;return n?a.a.createElement(m,i(i({ref:t},l),{},{components:n})):a.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=b;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),o=(n(0),n(108)),s={id:"database",title:"Database Setup"},i={unversionedId:"tutorials/database",id:"tutorials/database",isDocsHomePage:!1,title:"Database Setup",description:"Lumos is designed based on the Index-Query-Assemble pattern. The Lumos indexer polls blocks from a CKB node, indexes them and stores the indexed data in a local database to provide optimal query.",source:"@site/docs\\tutorials\\database.md",slug:"/tutorials/database",permalink:"/lumos_doc/docs/tutorials/database",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/database.md",version:"current",sidebar:"someSidebar",previous:{title:"Config Manager Setup",permalink:"/lumos_doc/docs/tutorials/config"},next:{title:"Querying on Cells",permalink:"/lumos_doc/docs/tutorials/cells"}},c=[{value:"Operations",id:"operations",children:[{value:"Use the RocksDB Indexer",id:"use-the-rocksdb-indexer",children:[]},{value:"Use the SQL Backed Indexer",id:"use-the-sql-backed-indexer",children:[]}]}],l={toc:c};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Lumos is designed based on the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"}),Object(o.b)("inlineCode",{parentName:"a"},"Index-Query-Assemble"))," pattern. The Lumos indexer polls blocks from a CKB node, indexes them and stores the indexed data in a local database to provide optimal query."),Object(o.b)("p",null,"Dapps built with Lumos must have an indexer configured and running."),Object(o.b)("p",null,"Lumos provides two types of indexer:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A RocksDB backed indexer: The RocksDB backed indexer is contained in the  ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer")," package."),Object(o.b)("li",{parentName:"ul"},"A SQL backed indexer: A separate package, the ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/sql-indexer")," package contains the SQL backed indexer. The SQL backed indexer is using the same interface as the RocksDB backed indexer. Now Lumos supports the SQL databases of the latest stable versions of PostgreSQL and MySQL.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note"),":  The usage for the SQL backed indexer is not fully verified. It is still in the experimental stage."),Object(o.b)("h2",{id:"operations"},"Operations"),Object(o.b)("h3",{id:"use-the-rocksdb-indexer"},"Use the RocksDB Indexer"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'const { Indexer, CellCollector, TransactionCollector } = require("@ckb-lumos/indexer");\nconst indexer = new Indexer("http://127.0.0.1:8114", "/tmp/indexed-data");\nindexer.startForever();\n')),Object(o.b)("h3",{id:"use-the-sql-backed-indexer"},"Use the SQL Backed Indexer"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Step 1. Create a PostgreSQL instance.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"$ docker run --name postgres -e POSTGRES_USER=user -e POSTGRES_DB=lumos -e POSTGRES_PASSWORD=password -d -p 5432:5432 postgres\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Step 2. Clone the Lumos repository to initialize the SQL database.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"$ cd $TOP\n$ git clone --recursive https://github.com/nervosnetwork/lumos\n$ cd lumos && git checkout v0.14.2-rc6\n$ yarn\n$ cd packages/sql-indexer\n$ cat << EOF > knexfile.js\nmodule.exports = {\n  development: {\n    client: 'postgresql',\n    connection: {\n      database: 'lumos',\n      user:     'user',\n      password: 'password'\n    },\n    pool: {\n      min: 2,\n      max: 10\n    },\n    migrations: {\n      tableName: 'knex_migrations'\n    }\n  }\n};\nEOF\n$ npx knex migrate:up\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Step 3. Start the SQL Indexer.")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'const { Indexer, CellCollector, TransactionCollector } = require("@ckb-lumos/sql-indexer");\nconst indexer = new Indexer("http://127.0.0.1:5432", "/tmp/indexed-data");\nindexer.startForever();\n')))}d.isMDXComponent=!0}}]);