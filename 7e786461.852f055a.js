(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,m=p["".concat(i,".").concat(b)]||p[b]||u[b]||o;return n?a.a.createElement(m,s(s({ref:t},l),{},{components:n})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),o=(n(0),n(110)),i={id:"database",title:"Set Up the SQL Database"},s={unversionedId:"tutorials/database",id:"tutorials/database",isDocsHomePage:!1,title:"Set Up the SQL Database",description:"Lumos is designed based on the Index-Query-Assemble pattern. The Lumos indexer polls blocks from a CKB node, indexes them and stores the indexed data in a local database to provide optimal query.",source:"@site/docs\\tutorials\\database.md",slug:"/tutorials/database",permalink:"/lumos_doc/docs/tutorials/database",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/database.md",version:"current",sidebar:"someSidebar",previous:{title:"Set Up the Config Manager",permalink:"/lumos_doc/docs/tutorials/config"},next:{title:"Create an Account for CKB Transactions",permalink:"/lumos_doc/docs/tutorials/createaccount"}},c=[{value:"Steps",id:"steps",children:[{value:"Step 1. Create a PostgreSQL instance.",id:"step-1-create-a-postgresql-instance",children:[]},{value:"Step 2. Clone the Lumos repository to initialize the SQL database.",id:"step-2-clone-the-lumos-repository-to-initialize-the-sql-database",children:[]},{value:"Step 3. Check the Current Indexed Tip",id:"step-3-check-the-current-indexed-tip",children:[]},{value:"Install the Pre-built Native Module for Electron Applications",id:"install-the-pre-built-native-module-for-electron-applications",children:[]}]}],l={toc:c};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Lumos is designed based on the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"}),Object(o.b)("inlineCode",{parentName:"a"},"Index-Query-Assemble"))," pattern. The Lumos indexer polls blocks from a CKB node, indexes them and stores the indexed data in a local database to provide optimal query."),Object(o.b)("p",null,"The Lumos indexer supports two types of databases:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The RocksDB database: The RocksDB backed indexer is contained in the  ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer")," package. After the ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer")," package is installed, the RocksDB backed indexer can be used directly."),Object(o.b)("li",{parentName:"ul"},"The SQL database: The Lumos indexer supports the SQL database of the latest stable versions of PostgreSQL and MySQL. A separate package, the ",Object(o.b)("inlineCode",{parentName:"li"},"@ckb-lumos/sql-indexer")," package contains the SQL backed indexer. Specific SQL database settings are required before using the SQL backed indexer. ")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note"),":  The usage for the SQL backed indexer is not fully verified. It is still in the experimental stage."),Object(o.b)("h2",{id:"steps"},"Steps"),Object(o.b)("h3",{id:"step-1-create-a-postgresql-instance"},"Step 1. Create a PostgreSQL instance."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ docker run --name postgres -e POSTGRES_USER=user -e POSTGRES_DB=lumos -e POSTGRES_PASSWORD=password -d -p 5432:5432 postgres\n")),Object(o.b)("h3",{id:"step-2-clone-the-lumos-repository-to-initialize-the-sql-database"},"Step 2. Clone the Lumos repository to initialize the SQL database."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-shell"}),"$ cd $TOP\n$ git clone --recursive https://github.com/nervosnetwork/lumos\n$ cd lumos && git checkout v0.15.0\n$ yarn\n$ cd packages/sql-indexer\n$ cat << EOF > knexfile.js\nmodule.exports = {\n  development: {\n    client: 'postgresql',\n    connection: {\n      database: 'lumos',\n      user:     'postgres',\n      password: 'password'\n    },\n    pool: {\n      min: 2,\n      max: 10\n    },\n    migrations: {\n      tableName: 'knex_migrations'\n    }\n  }\n};\nEOF\n$ npx knex migrate:up\n")),Object(o.b)("h3",{id:"step-3-check-the-current-indexed-tip"},"Step 3. Check the Current Indexed Tip"),Object(o.b)("p",null,"To check the current indexed tip after the indexer is started:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'> const { Indexer, CellCollector, TransactionCollector } = require("@ckb-lumos/sql-indexer");\n> const indexer = new Indexer("http://127.0.0.1:5432", "/tmp/indexed-data");\n> indexer.startForever();\n> await indexer.tip()\n{\n  block_number: \'0x0\',\n  block_hash: \'0x120ab9abd48e3b82f93b88eba8c50a0e1304cc2fffb5573fb14b56c6348f2305\'\n}\n')),Object(o.b)("h3",{id:"install-the-pre-built-native-module-for-electron-applications"},"Install the Pre-built Native Module for Electron Applications"),Object(o.b)("p",null,"The Lumos indexer is based on the CKB indexer that is developed by Rust. To leverage the native Rust code without installing Rust, Lumos provides the Lumos indexer with a pre-built native module of the CKB indexer."),Object(o.b)("p",null,"To install the pre-built native module of the CKB indexer for Electron applications: "),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ LUMOS_NODE_RUNTIME=electron npm i\n")))}d.isMDXComponent=!0}}]);