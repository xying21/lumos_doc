(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),c=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=c.a.createContext({}),b=function(e){var t=c.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=b(e.components);return c.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},f=c.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=b(n),f=a,u=d["".concat(r,".").concat(f)]||d[f]||p[f]||l;return n?c.a.createElement(u,o(o({ref:t},s),{},{components:n})):c.a.createElement(u,o({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=f;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return c.a.createElement.apply(null,r)}return c.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(3),c=n(7),l=(n(0),n(108)),r={id:"cells",title:"Querying on Cells"},o={unversionedId:"tutorials/cells",id:"tutorials/cells",isDocsHomePage:!1,title:"Querying on Cells",description:"A Cell is the most basic structure that represents a single piece of data in Nervos. The data contained in a Cell can take many forms, including CKBytes, tokens, code like JavaScript code, or even serialized data like JSON strings.",source:"@site/docs\\tutorials\\cells.md",slug:"/tutorials/cells",permalink:"/lumos_doc/docs/tutorials/cells",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/cells.md",version:"current",sidebar:"someSidebar",previous:{title:"Database Setup",permalink:"/lumos_doc/docs/tutorials/database"},next:{title:"Querying on Transactions",permalink:"/lumos_doc/docs/tutorials/querytransactions"}},i=[{value:"Data Structure",id:"data-structure",children:[]},{value:"Operations",id:"operations",children:[{value:"Query Existing Cells",id:"query-existing-cells",children:[]},{value:"Specify <code>lock</code> and <code>type</code> Script",id:"specify-lock-and-type-script",children:[]},{value:"Query Cells between Given block_numbers",id:"query-cells-between-given-block_numbers",children:[]},{value:"Skip Cells",id:"skip-cells",children:[]},{value:"Order Cells by Block Number by Setting the <code>order</code> Field",id:"order-cells-by-block-number-by-setting-the-order-field",children:[]},{value:"Prefix Search on <code>args</code>",id:"prefix-search-on-args",children:[]},{value:"Fine Grained Query for Cells",id:"fine-grained-query-for-cells",children:[]},{value:"Get Cell Minimal Capacity",id:"get-cell-minimal-capacity",children:[]},{value:"Get the Address from a Lock Script",id:"get-the-address-from-a-lock-script",children:[]},{value:"Generate Testnet Address from a Lock Script",id:"generate-testnet-address-from-a-lock-script",children:[]},{value:"Get Lock Script from an Address",id:"get-lock-script-from-an-address",children:[]},{value:"Get the Balance of an Account",id:"get-the-balance-of-an-account",children:[]},{value:"Get Uncommitted Cells",id:"get-uncommitted-cells",children:[]}]}],s={toc:i};function b(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"A Cell is the most basic structure that represents a single piece of data in Nervos. The data contained in a Cell can take many forms, including CKBytes, tokens, code like JavaScript code, or even serialized data like JSON strings."),Object(l.b)("h2",{id:"data-structure"},"Data Structure"),Object(l.b)("p",null,"A cell includes the following fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"capacity")),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The amount of CKB tokens stored in the cell. "),Object(l.b)("li",{parentName:"ul"},"The size limit on how much information the cell can store.")),Object(l.b)("p",{parentName:"li"},"The basic unit for ",Object(l.b)("inlineCode",{parentName:"p"},"capacity")," is ",Object(l.b)("inlineCode",{parentName:"p"},"shannon"),". A bigger unit ",Object(l.b)("inlineCode",{parentName:"p"},"CKByte"),", or just ",Object(l.b)("inlineCode",{parentName:"p"},"CKB")," is also used. 1 CKB equals ",Object(l.b)("inlineCode",{parentName:"p"},"10**8")," shannons. 1 CKB also means the cell that can store 1 byte of information.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"data"),": State data stored in this cell."),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Note"),": The ",Object(l.b)("inlineCode",{parentName:"p"},"data")," field can be empty. The total bytes used by a cell (including data) must be less than or equal to the capacity of the cell. "),Object(l.b)("p",{parentName:"li"},"The following data can be stored in the ",Object(l.b)("inlineCode",{parentName:"p"},"data")," field:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Script code as explained in ",Object(l.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.nervos.org/docs/reference/script"}),"Script"),". "),Object(l.b)("li",{parentName:"ul"},"Token amount for User Defined Token cells."),Object(l.b)("li",{parentName:"ul"},"The latest game states for an on-chain fantasy game."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"lock")," script: The ownership of a cell."),Object(l.b)("p",{parentName:"li"},"When a specified cell is used as an input cell in a transaction, the ",Object(l.b)("inlineCode",{parentName:"p"},"lock script")," included in the cell is executed for signature verification. If the ",Object(l.b)("inlineCode",{parentName:"p"},"lock script")," fails in the verification, the transaction will be rejected.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"type")," script: The script to be executed to validate the structure of both input cells and output cells included in a transaction."),Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"type")," script is typically used to validate a DApp logic, such as creating UDTs."))),Object(l.b)("p",null,"For more information about the cell model, see ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.nervos.org/docs/reference/cell"}),"Cell Data Structure")," and ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0002-ckb/0002-ckb.md#42-cell"}),"CKB RFC"),"."),Object(l.b)("h2",{id:"operations"},"Operations"),Object(l.b)("h3",{id:"query-existing-cells"},"Query Existing Cells"),Object(l.b)("p",null,"To query existing cells, create a CellCollector:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    code_hash:\n      "0x0000000000000000000000000000000000000000000000000000000000000000",\n    hash_type: "data",\n    args: "0x62e907b15cbf27d5425399ebf6f0fb50ebb88f18",\n  },\n});\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("h3",{id:"specify-lock-and-type-script"},"Specify ",Object(l.b)("inlineCode",{parentName:"h3"},"lock")," and ",Object(l.b)("inlineCode",{parentName:"h3"},"type")," Script"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n    lock: {\n        args: "0x92aad3bbab20f225cff28ec1d856c6ab63284c7a",\n        code_hash: "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        hash_type: "type"\n    },\n    type: {\n        args: "0x",\n        code_hash: "0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e",\n        hash_type: "type"\n    }\n})\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("h3",{id:"query-cells-between-given-block_numbers"},"Query Cells between Given block_numbers"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    code_hash: \n      "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n    hash_type: "type",\n    args: "0xa528f2b9a51118b193178db4cf2f3db92e7df323",\n  },\n  fromBlock: "0x225510", // "0x" + 2250000n.toString(16)\n  toBlock: "0x225ce0", // "0x" + 2252000n.toString(16)\n});\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("p",null,"It will fetch cells between ",Object(l.b)("inlineCode",{parentName:"p"},"[fromBlock, toBlock]"),", which means both ",Object(l.b)("inlineCode",{parentName:"p"},"fromBlock")," and ",Object(l.b)("inlineCode",{parentName:"p"},"toBlock")," are included in query range."),Object(l.b)("h3",{id:"skip-cells"},"Skip Cells"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    code_hash: \n      "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n    hash_type: "type",\n    args: "0xa528f2b9a51118b193178db4cf2f3db92e7df323",\n  },\n  skip: 100,\n});\n\nfor await (const tx of cellCollector.collect()) {\n  console.log(tx);\n}\n')),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"skip")," field represents the number of cells being skipped, which in the above code snippet means it would skip the first 100 cells and return from the 101st. cell."),Object(l.b)("h3",{id:"order-cells-by-block-number-by-setting-the-order-field"},"Order Cells by Block Number by Setting the ",Object(l.b)("inlineCode",{parentName:"h3"},"order")," Field"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    code_hash: \n      "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n    hash_type: "type",\n    args: "0xa528f2b9a51118b193178db4cf2f3db92e7df323",\n  },\n  fromBlock: "0x253b40", // "0x" + 2440000n.toString(16)\n  toBlock: "0x253f28", // "0x" + 2441000n.toString(16)\n  order: "desc", // default option is "asc"\n  skip: 300,\n});\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("h3",{id:"prefix-search-on-args"},"Prefix Search on ",Object(l.b)("inlineCode",{parentName:"h3"},"args")),Object(l.b)("p",null,"The default ",Object(l.b)("inlineCode",{parentName:"p"},"argsLen")," is -1, which means you pass the full slice of original args, and you can specify it when the ",Object(l.b)("inlineCode",{parentName:"p"},"args")," field is the prefix of original args."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    code_hash: \n      "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n    hash_type: "type",\n    args: "0xa528f2b9a51118b193178db4cf2f3db92e7df3", // truncate the last byte of orignal args: 0xa528f2b9a51118b193178db4cf2f3db92e7df323\n  },\n  argsLen: 20, // default option is -1\n  fromBlock: "0x253b40", // "0x" + 2440000n.toString(16)\n  toBlock: "0x253f28", // "0x" + 2441000n.toString(16)\n  order: "desc", // default option is "asc"\n  skip: 300,\n});\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("p",null,"We recommend to specify explicit length for the ",Object(l.b)("inlineCode",{parentName:"p"},"argsLen")," field. For example, the length is 20 in normal scenario and 28 in multisig scenario for lock script.  When the length is not certain, the ",Object(l.b)("inlineCode",{parentName:"p"},"argsLen")," field can be set as ",Object(l.b)("inlineCode",{parentName:"p"},"any"),". But there is performance lost when use ",Object(l.b)("inlineCode",{parentName:"p"},"any")," rather than explicitly specified length."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    code_hash: \n      "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n    hash_type: "type",\n    args: "0xa528f2b9a51118b193178db4cf2f3db92e7d", // truncate the last two bytes of original args: 0xa528f2b9a51118b193178db4cf2f3db92e7df323\n  },\n  argsLen: "any",\n  fromBlock: "0x253b40", // "0x" + 2440000n.toString(16)\n  toBlock: "0x253f28", // "0x" + 2441000n.toString(16)\n  order: "desc", // default option is "asc"\n  skip: 300,\n});\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("h3",{id:"fine-grained-query-for-cells"},"Fine Grained Query for Cells"),Object(l.b)("p",null,"Fine grained query for cells can be achieved by using ",Object(l.b)("inlineCode",{parentName:"p"},"ScriptWrapper")," with customized options like ",Object(l.b)("inlineCode",{parentName:"p"},"argsLen"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'cellCollector = new CellCollector(indexer, {\n  lock: {\n    script: {\n      code_hash: \n        "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n      hash_type: "type",\n      args: "0xe60f7f88c94ef365d540afc1574c46bb017765", // trucate the last byte of original args: 0xe60f7f88c94ef365d540afc1574c46bb017765a2\n    },\n    argsLen: 20, \n  },\n  type: {\n    script: {\n      code_hash: "0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e",\n      hash_type: "type",\n      args: "0x",\n    },\n    // when the `argsLen` is not setted here, it will use the outside `argsLen` config, which in this case is -1 by default\n  }\n});\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell);\n}\n')),Object(l.b)("h3",{id:"get-cell-minimal-capacity"},"Get Cell Minimal Capacity"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const { minimalCellCapacity, generateAddress, parseAddress } = require("@ckb-lumos/helpers")\n\n// Get cell minimal capacity.\nconst result = minimalCellCapacity({\n  cell_output: {\n    capacity: "0x174876e800",\n    lock: {\n      args: "0x36c329ed630d6ce750712a477543672adab57f4c",\n      code_hash:\n        "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n      hash_type: "type",\n    },\n    type: null,\n  },\n  data: "0x",\n  block_hash: null,\n  block_number: null,\n  out_point: null,\n})\n\n// result will be 6100000000n shannons.\n')),Object(l.b)("h3",{id:"get-the-address-from-a-lock-script"},"Get the Address from a Lock Script"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// Use `generateAddress` to get address from lock script.\nconst address = generateAddress({\n  code_hash:\n    "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n  hash_type: "type",\n  args: "0x36c329ed630d6ce750712a477543672adab57f4c",\n})\n\n// Then you will get mainnet address "ckb1qyqrdsefa43s6m882pcj53m4gdnj4k440axqdt9rtd"\n')),Object(l.b)("h3",{id:"generate-testnet-address-from-a-lock-script"},"Generate Testnet Address from a Lock Script"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'//you can generate testnet address by\nconst { predefined } = require("@ckb-lumos/config-manager")\n\nconst address = generateAddress({\n  code_hash:\n  "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n  hash_type: "type",\n  args: "0x36c329ed630d6ce750712a477543672adab57f4c",\n}, { config: predefined.AGGRON4 })\n\n// Will get testnet address "ckt1qyqrdsefa43s6m882pcj53m4gdnj4k440axqswmu83".\n')),Object(l.b)("h3",{id:"get-lock-script-from-an-address"},"Get Lock Script from an Address"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// Use `parseAddress` to get lock script from an address.\nconst script = parseAddress("ckb1qyqrdsefa43s6m882pcj53m4gdnj4k440axqdt9rtd")\n')),Object(l.b)("h3",{id:"get-the-balance-of-an-account"},"Get the Balance of an Account"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Step 1. Find all the simple CKB cells for the user.")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const script: Script = {\n  code_hash: "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n  hash_type: "type",\n  args: "0xcbfbb9edb5838e2d61061c3fc69eaaa5fdbd3273"\n};\n\nconst collector = indexer.collector({ lock: script, type: null });\n\nconst cells: Cell[] = [];\nfor await (const cell of collector.collect()) {\n  cells.push(cell);\n}\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Step 2. Add the capacity of these cells up and return the result as the balance.")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"return cells\n  .map((cell) =>\n    BigInt(\n      cell.cell_output.capacity\n    )\n  )\n  .reduce((balance, capacity) => balance + capacity, 0n);\n")),Object(l.b)("h3",{id:"get-uncommitted-cells"},"Get Uncommitted Cells"),Object(l.b)("p",null,"The transaction manager (",Object(l.b)("inlineCode",{parentName:"p"},"@ckb-lumos/transaction-manager"),") is a tool for managing uncommitted cells, you can ",Object(l.b)("inlineCode",{parentName:"p"},"send_transaction")," via this tool and get uncommitted outputs by ",Object(l.b)("inlineCode",{parentName:"p"},"collector"),"."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// generate a new `TransactionManager` instance and start.\nconst TransactionManager = require("@ckb-lumos/transaction-manager")\nconst { Indexer } = require("@ckb-lumos/indexer")\ntransactionManager.start()\n\n// you can get uncommitted cells by `transactionManager.collector`.\nconst collector = transactionManager.collector({ lock })\nfor await (const cell of collector.collect()) {\n  console.log(cell)\n}\n')),Object(l.b)("h3",{id:""}),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"")))}b.isMDXComponent=!0}}]);