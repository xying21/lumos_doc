(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),c=(n(0),n(126)),s={id:"querytransactions",title:"Query on Transactions"},o={unversionedId:"tutorials/querytransactions",id:"tutorials/querytransactions",isDocsHomePage:!1,title:"Query on Transactions",description:"Transactions are the most fundamental entities for a DApp to interact with Nervos CKB. For more information about CKB transactions, see Nervos Docs Data Structures.",source:"@site/docs\\tutorials\\queryTransactions.md",slug:"/tutorials/querytransactions",permalink:"/lumos_doc/docs/tutorials/querytransactions",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/queryTransactions.md",version:"current",sidebar:"sidebar2",previous:{title:"Operate on Cells",permalink:"/lumos_doc/docs/tutorials/operateoncells"},next:{title:"Assemble Transactions",permalink:"/lumos_doc/docs/tutorials/buildtransactions"}},i=[{value:"Query Options",id:"query-options",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Environment",id:"environment",children:[]},{value:"Examples",id:"examples",children:[{value:"Query Transactions by a Lock Script",id:"query-transactions-by-a-lock-script",children:[]},{value:"Query Transactions between Given Block Numbers",id:"query-transactions-between-given-block-numbers",children:[]},{value:"Skip Transactions",id:"skip-transactions",children:[]},{value:"Order Transactions by Block Number",id:"order-transactions-by-block-number",children:[]},{value:"Prefix Search on <var>args</var>",id:"prefix-search-on-args",children:[]},{value:"Fine-grained Query for Transactions",id:"fine-grained-query-for-transactions",children:[]},{value:"Get Transaction Status and Block Hash",id:"get-transaction-status-and-block-hash",children:[]}]}],l={toc:i};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Transactions are the most fundamental entities for a DApp to interact with Nervos CKB. For more information about CKB transactions, see ",Object(c.b)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/transaction"},"Nervos Docs: Transaction")," and ",Object(c.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md#transaction"},"CKB RFC: Data Structures"),".")),Object(c.b)("p",null,"Lumos provides functions to support querying on transactions for specific query options."),Object(c.b)("h2",{id:"query-options"},"Query Options"),Object(c.b)("p",null,"Lumos supports to query on transactions for the options including ",Object(c.b)("var",null,"lock"),", ",Object(c.b)("var",null,"type"),", ",Object(c.b)("var",null,"argsLen"),", ",Object(c.b)("var",null,"data"),", ",Object(c.b)("var",null,"fromBlock"),", ",Object(c.b)("var",null,"toBlock"),", ",Object(c.b)("var",null,"skip")," and ",Object(c.b)("var",null,"order"),"."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"lock"),": A lock script or a ScriptWrapper of a lock script."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"type"),": A type script or a ScriptWrapper of a type script.",Object(c.b)("p",{parentName:"li"},"The ",Object(c.b)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/interfaces/base.scriptwrapper.html"},"ScriptWrapper")," interface combines ",Object(c.b)("var",null,"argsLen")," and ",Object(c.b)("var",null,"ioType")," with a lock or type script to enable fine-grained queries. For more information, see ",Object(c.b)("a",{parentName:"p",href:"../tutorials/querytransactions#fine-grained-query-for-transactions"},"Fine-grained Query for Transactions"),".")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"argsLen"),": The lock or type args length. The default value of ",Object(c.b)("var",null,"argsLen")," is -1 for the query on a full slice of the args."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"fromBlock"),": The starting block number that the query returns."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"toBlock"),": The ending block number that the query returns."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"skip"),": The number of transactions being skipped for the Lumos indexer."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("var",null,"order"),": The query result can be returned in order of block numbers. The default value is ",Object(c.b)("var",null,"asc")," (ascending) for the returned result.")),Object(c.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(c.b)("p",null,"The following prerequisites apply for the examples in this guide:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"The development environment is set up. For more information, see ",Object(c.b)("a",{parentName:"li",href:"http://localhost:3000/lumos_doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),"."),Object(c.b)("li",{parentName:"ul"},"The CKB node is installed and started on DEV chain. For more information, see ",Object(c.b)("a",{parentName:"li",href:"http://localhost:3000/lumos_doc/docs/preparation/installckb"},"Install a CKB Node"),"."),Object(c.b)("li",{parentName:"ul"},"The Lumos packages (",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/base"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/indexer"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/helpers"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/config-manager"),", ",Object(c.b)("inlineCode",{parentName:"li"},"@ckb-lumos/rpc"),") are installed.")),Object(c.b)("h2",{id:"environment"},"Environment"),Object(c.b)("p",null,"The following examples are verified on Ubuntu 20.04.2. Steps on the other platforms can be adjusted accordingly."),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("h3",{id:"query-transactions-by-a-lock-script"},"Query Transactions by a Lock Script"),Object(c.b)("p",null,"The following example creates a new ",Object(c.b)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/indexer.transactioncollector.html"},"TransactionCollector")," to collect transactions for a specific lock script and returns the transactions with status."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTxsbyLock" {7}',title:'"hellolumos/src/querytransactions.ts/getTxsbyLock"',"{7}":!0},'import { INDEXER } from "./index";\nimport { Script, Transaction } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTxsbyLock(lockScript: Script) {\n  console.log("Get transactions by lock script:");\n  const txCollector = new TransactionCollector(INDEXER, { lock: lockScript });\n  const txs: Transaction[] = [];\n  for await (const txWithStatus of txCollector.collect()) {\n    //@ts-ignore\n    const tx = txWithStatus.transaction;\n    //@ts-ignore\n    const txStatus = txWithStatus.tx_status.status;\n    txs.push(tx);\n    //console.log(txStatus);\n  }\n  return txs;\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"getTxsbyLock")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions }=require(\".\");\nThe server is started.\n> const bob = accounts.BOB;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(bob.ADDRESS);\n> await querytransactions.getTxsbyLock(script);\nGet transactions by lock script:\n[\n  {\n    cell_deps: [ [Object] ],\n    hash: '0x32a717c2af9160b800805796c68803213060df782834486c72cfbacbb0868d62',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x55000000100000005500000055000000410000003056c419901742aeb36c95e0b3d17449f086ac9a551b7cce1fd67b61de2ff9c05a4730738de3a3c06cf0405276226508b8423cb29e187e58895fae0cfd2fe75d01'\n    ]\n  },\n  {\n    cell_deps: [ [Object] ],\n    hash: '0x144ae79bc6064ae99e51b7105f4b61328dd4293d68d132b7a04d86409952ae2e',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x550000001000000055000000550000004100000047441d4fea439fd06577eafadfe15c58e0a3aa13cbd13851d622b99c08e59b05354706bafeb411b1d244f022229ffd559a10a5b1cd545a699bdea824da420bf000'\n    ]\n  },\n  {\n    cell_deps: [ [Object] ],\n    hash: '0x10104ec6857fd99b818e7b401216268c067ce7fbc536b77c86f3565c108e958e',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000ec0fa41cca9234b12b7451e3894219c32af0a493d93bf1ec38d9fcccc5297c8a3598a427b4124e30329a3b4b80e885e89006d6b3abf65f385eccf19676977f4e00'\n    ]\n  }\n]\n")))),Object(c.b)("h3",{id:"query-transactions-between-given-block-numbers"},"Query Transactions between Given Block Numbers"),Object(c.b)("p",null,"The following example fetches the transactions between ","[",Object(c.b)("var",null,"fromBlock"),", ",Object(c.b)("var",null,"toBlock"),"]","."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTxsbetweenBlocks" {10-14}',title:'"hellolumos/src/querytransactions.ts/getTxsbetweenBlocks"',"{10-14}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTxsbetweenBlocks(\n  lockScript: Script,\n  fromBlock: string,\n  toBlock: string\n) {\n  const txCollector = new TransactionCollector(INDEXER, {\n    lock: lockScript,\n    fromBlock,\n    toBlock,\n  });\n  console.log("Get transactions between given blocks:");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"getTxsbetweenBlocks")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-12}","{1,2,5,7-12}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(alice.ADDRESS);\n> const from = \"0x801\";\n> const to = \"0x804\";\n> await querytransactions.getTxsbetweenBlocks(script, from, to);\nGet transactions between given blocks:\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0x5457bae99ab4cea79c78d4b239a92b5e30580cd1dda6637a7a661991704020cd',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x0c6c197f43b4a27b6c881a2f01d9c4ba8abf2244e2284afa0f1b737979500fbe',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0xb2bf608b9e0499fb8679af8b4126c4921fadfdb6efa0a5375e3aaa0676fc65ae',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x40c9b99ebb5da3888efb6fbc63fd13b4425a1b81b2a4271fb99a3ba29de9a55c',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0x59dd00d1444d346b71b8a0c94ea0d418b8a4c85d86040485c145a8a60725cad0',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'\n    ]\n  },\n  tx_status: {\n    block_hash: '0xd0c09a6615b30f685dd0b0e627021f89e0f35e9b59c575001d8a11f63436b76c',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0xe332fb6efba38e16b8fd20a4f47d5fffcf8fcac0c863b0eb30ef75067847936d',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000709026a75b82aca580d758c62eceaa9982b81057146a6c0205db3ee7b5581e3201d3ccd5845ea6d25b9b977f98f7c1c74efe4c38292b654d03fa2d037fa0777b01'\n    ]\n  },\n  tx_status: {\n    block_hash: '0xd0c09a6615b30f685dd0b0e627021f89e0f35e9b59c575001d8a11f63436b76c',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [],\n    hash: '0xea8f658e6ea08c38f58f6a0af3530396aba0e51e1064db8626ecd38976625c34',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object] ],\n    outputs_data: [ '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x590000000c00000055000000490000001000000030000000310000009bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce801140000007e00660b8ab122bca3ba468c5b6eee71f40b7d8e00000000'\n    ]\n  },\n  tx_status: {\n    block_hash: '0xbae60c9c4f54d6f6a970fb76c2fdd226a83dd8724cff082157da559ce6cf507f',\n    status: 'committed'\n  }\n}\n")))),Object(c.b)("h3",{id:"skip-transactions"},"Skip Transactions"),Object(c.b)("p",null,"The ",Object(c.b)("var",null,"skip")," query option represents the number of transactions being skipped."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTxsandSkip" {6}',title:'"hellolumos/src/querytransactions.ts/getTxsandSkip"',"{6}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTxsandSkip(lock: Script, skip: number) {\n  const txCollector = new TransactionCollector(INDEXER, { lock, skip });\n  console.log("Get transactions and skip the first", skip, "trasactions");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),Object(c.b)("h3",{id:"order-transactions-by-block-number"},"Order Transactions by Block Number"),Object(c.b)("p",null,"The following example creates a new ",Object(c.b)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/indexer.transactioncollector.html"},"TransactionCollector"),' and uses the TransactionCollector to collect transactions in order of block numbers for a specific lock script. If the order is not specified, the default order is "asc" (ascending) for the returned result.'),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTxsandOrder" {6}',title:'"hellolumos/src/querytransactions.ts/getTxsandOrder"',"{6}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function getTxsandOrder(lock: Script, order: "asc" | "desc") {\n  const txCollector = new TransactionCollector(INDEXER, { lock, order });\n  console.log("Get transactions in order of", order);\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),Object(c.b)("h3",{id:"prefix-search-on-args"},"Prefix Search on ",Object(c.b)("var",null,"args")),Object(c.b)("p",null,"To enable prefix search on the args of a lock script or a type script, ",Object(c.b)("var",null,"argsLen")," can be assigned with a value other than the default value -1."),Object(c.b)("p",null,"The lock script args length is ",Object(c.b)("strong",{parentName:"p"},"20")," in normal scenarios and ",Object(c.b)("strong",{parentName:"p"},"28")," in the multisig scenario. When the length is not certain, the ",Object(c.b)("var",null,"argsLen")," parameter can be set as ",Object(c.b)("inlineCode",{parentName:"p"},"any"),". "),Object(c.b)("div",{className:"admonition admonition-info alert alert--info"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"It is recommended to specify an explicit length for the ",Object(c.b)("var",null,"argsLen")," parameter in a prefix search, that has better performance than using ",Object(c.b)("inlineCode",{parentName:"p"},"any")," for ",Object(c.b)("var",null,"argsLen"),"."))),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/findTXsbyPrefix" {6}',title:'"hellolumos/src/querytransactions.ts/findTXsbyPrefix"',"{6}":!0},'import { INDEXER } from "./index";\nimport { Script } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function findTXsbyPrefix(lock: Script, argsLen: number) {\n  const txCollector = new TransactionCollector(INDEXER, { lock, argsLen });\n  console.log("Prefix Search");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),Object(c.b)("h3",{id:"fine-grained-query-for-transactions"},"Fine-grained Query for Transactions"),Object(c.b)("p",null,"Fine-grained query can query on transactions at the granularity of a cell type, a lock or type script, and the args length of the lock or type script by using ",Object(c.b)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/interfaces/base.scriptwrapper.html"},"ScriptWrapper"),"."),Object(c.b)("p",null,"The query gets the transactions containing the cells that are in ",Object(c.b)("var",null,"ioType")," ( ",Object(c.b)("inlineCode",{parentName:"p"},"input")," or ",Object(c.b)("inlineCode",{parentName:"p"},"output")," or ",Object(c.b)("inlineCode",{parentName:"p"},"both"),") and with a specific lock or type script, and the args length of the script is ",Object(c.b)("var",null,"argsLen"),". If ",Object(c.b)("var",null,"argsLen")," is not specified, the ",Object(c.b)("var",null,"argsLen")," config outside of the ScriptWrapper or the default value -1 will be used."),Object(c.b)("p",null,"The following example is the fine-grained query for transactions on a lock script, a lock args length and a cell type."),Object(c.b)("p",null,"Example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/finegrainedSearch" {10-14}',title:'"hellolumos/src/querytransactions.ts/finegrainedSearch"',"{10-14}":!0},'import { INDEXER } from "./index";\nimport { Script, ScriptWrapper } from "@ckb-lumos/base";\nimport { TransactionCollector } from "@ckb-lumos/indexer";\n\nexport async function finegrainedSearch(\n  lockScript: Script,\n  argslen: number,\n  iotype: "output" | "input" | "both"\n) {\n  const lock: ScriptWrapper = {\n    script: lockScript,\n    ioType: iotype,\n    argsLen: argslen,\n  };\n  const txCollector = new TransactionCollector(INDEXER, {\n    lock,\n  });\n  console.log("Fine Grained Query");\n  for await (const txWithStatus of txCollector.collect()) {\n    console.log(txWithStatus);\n  }\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"finegrainedSearch")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, querytransactions } = require(\".\");\nThe server is started.\n> const bob = accounts.BOB;\n> const { parseAddress } = require(\"@ckb-lumos/helpers\");\n> const script = parseAddress(bob.ADDRESS);\n> await querytransactions.finegrainedSearch(script, 20, \"output\");\nFine Grained Query\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x32a717c2af9160b800805796c68803213060df782834486c72cfbacbb0868d62',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x55000000100000005500000055000000410000003056c419901742aeb36c95e0b3d17449f086ac9a551b7cce1fd67b61de2ff9c05a4730738de3a3c06cf0405276226508b8423cb29e187e58895fae0cfd2fe75d01'\n    ]\n  },\n  tx_status: {\n    block_hash: '0xc21b34b009d5e355357eb55d9ee3456c6a90632434cff8dc515b2f0a207f854c',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x144ae79bc6064ae99e51b7105f4b61328dd4293d68d132b7a04d86409952ae2e',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x550000001000000055000000550000004100000047441d4fea439fd06577eafadfe15c58e0a3aa13cbd13851d622b99c08e59b05354706bafeb411b1d244f022229ffd559a10a5b1cd545a699bdea824da420bf000'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x2d70e178be2447f784d9c8c1c52630d10b3b3b23575896e61ff15983a7e5ba59',\n    status: 'committed'\n  }\n}\n{\n  transaction: {\n    cell_deps: [ [Object] ],\n    hash: '0x10104ec6857fd99b818e7b401216268c067ce7fbc536b77c86f3565c108e958e',\n    header_deps: [],\n    inputs: [ [Object] ],\n    outputs: [ [Object], [Object] ],\n    outputs_data: [ '0x', '0x' ],\n    version: '0x0',\n    witnesses: [\n      '0x5500000010000000550000005500000041000000ec0fa41cca9234b12b7451e3894219c32af0a493d93bf1ec38d9fcccc5297c8a3598a427b4124e30329a3b4b80e885e89006d6b3abf65f385eccf19676977f4e00'\n    ]\n  },\n  tx_status: {\n    block_hash: '0x64623c86af1df458caac8a1433e50ae7ffc228aaa1975d60ed03dfe3ec4ca3fc',\n    status: 'committed'\n  }\n}\n")))),Object(c.b)("h3",{id:"get-transaction-status-and-block-hash"},"Get Transaction Status and Block Hash"),Object(c.b)("p",null,"A transaction can be in one of the following status:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("strong",{parentName:"li"},"pending")," result means the transaction is in the pool, and not proposed yet."),Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("strong",{parentName:"li"},"proposed")," result means the transaction is in the pool, and can be committed in the next block."),Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("strong",{parentName:"li"},"committed")," result means that the block involving the transaction has been mined and is officially on chain.")),Object(c.b)("p",null,"The following example uses the ",Object(c.b)("inlineCode",{parentName:"p"},"get_transaction")," function of the ",Object(c.b)("inlineCode",{parentName:"p"},"@ckb-lumos/rpc")," package to get the transaction information for a specific transaction hash."),Object(c.b)("p",null,"Example: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/querytransactions.ts/getTxsbyHash" {5}',title:'"hellolumos/src/querytransactions.ts/getTxsbyHash"',"{5}":!0},'import { RPC } from "@ckb-lumos/RPC";\nconst rpc = new RPC("http://127.0.0.1:8114");\n\nexport async function getTxsbyHash(txHash: string) {\n  const txWithStatus = await rpc.get_transaction(txHash);\n\n  const status = txWithStatus?.tx_status.status;\n  const blockHash = txWithStatus?.tx_status.block_hash;\n  console.log("The transaction status is", status);\n  console.log("The block hash for the transaction is", blockHash);\n}\n')),Object(c.b)("p",null,"Try the ",Object(c.b)("inlineCode",{parentName:"p"},"getTxsbyHash")," function in the Node.js REPL mode:"),Object(c.b)("details",null,Object(c.b)("summary",null,"CLICK ME"),Object(c.b)("p",null,Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7}","{1,2,5,7}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { querytransactions } = require(".");\nThe server is started.\n> await querytransactions.getTxsbyHash("0x10104ec6857fd99b818e7b401216268c067ce7fbc536b77c86f3565c108e958e");\nThe transaction status is committed\nThe block hash for the transaction is 0x64623c86af1df458caac8a1433e50ae7ffc228aaa1975d60ed03dfe3ec4ca3fc\n')))))}b.isMDXComponent=!0},126:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||p[d]||c;return n?r.a.createElement(f,o(o({ref:t},l),{},{components:n})):r.a.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,s=new Array(c);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<c;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);