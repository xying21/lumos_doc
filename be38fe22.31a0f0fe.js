(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),u=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return n?o.a.createElement(f,s(s({ref:t},l),{},{components:n})):o.a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(7),a=(n(0),n(110)),i={id:"sudt",title:"SUDT"},s={unversionedId:"tutorials/sudt",id:"tutorials/sudt",isDocsHomePage:!1,title:"SUDT",description:"Simple User Defined Tokens (Simple UDT or SUDT) provides a way for DApp developers to issue custom tokens on Nervos CKB. The simple part in Simple UDT means we are defining a minimal standard that contains what\u2019s absolutely needed, more sophisticated actions are left to CKB\u2019s flexibility to achieve.",source:"@site/docs\\tutorials\\sudt.md",slug:"/tutorials/sudt",permalink:"/lumos_doc/docs/tutorials/sudt",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/sudt.md",version:"current",sidebar:"someSidebar",previous:{title:"NFT",permalink:"/lumos_doc/docs/tutorials/nft"}},c=[{value:"Data Structure",id:"data-structure",children:[]},{value:"Get SUDT Balance",id:"get-sudt-balance",children:[]},{value:"Issue SUDT",id:"issue-sudt",children:[]},{value:"Transfer SUDT",id:"transfer-sudt",children:[]}],l={toc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Simple User Defined Tokens (Simple UDT or SUDT) provides a way for DApp developers to issue custom tokens on Nervos CKB. The simple part in Simple UDT means we are defining a minimal standard that contains what\u2019s absolutely needed, more sophisticated actions are left to CKB\u2019s flexibility to achieve."),Object(a.b)("p",null,"For more information about SUDT, see ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://talk.nervos.org/t/rfc-simple-udt-draft-spec/4333"}),"RFC: Simple UDT Draft Spec"),"."),Object(a.b)("h2",{id:"data-structure"},"Data Structure"),Object(a.b)("p",null,"A SUDT cell contains the following fields:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"data:\n    amount: uint128\ntype:\n    code_hash: simple_udt type script\n    args: owner lock script hash (...)\nlock:\n    <user_defined>\n")),Object(a.b)("h2",{id:"get-sudt-balance"},"Get SUDT Balance"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'import { getConfig } from "@ckb-lumos/config-manager";\nimport { Cell, utils } from "@ckb-lumos/base";\n\nconst { lockScript, sudtArgs } = params;\n\n  const collector = indexer.collector({\n    lock: lockScript,\n    type: {\n      args: sudtArgs,\n      code_hash: getConfig().SCRIPTS["SUDT"].CODE_HASH,\n      hash_type: getConfig().SCRIPTS["SUDT"].HASH_TYPE,\n    },\n  });\n\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  let sum = BigInt(0);\n  return cells\n    .map((cell) => utils.readBigUInt128LE(cell.data))\n    .reduce((sum, amount) => (sum = sum += amount));\n')),Object(a.b)("h2",{id:"issue-sudt"},"Issue SUDT"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'import {sudt, common} from "@ckb-lumos/common-scripts";\nconst { sender, amount, txFee } = params;\n\n  let txSkeleton = TransactionSkeleton({\n    cellProvider: indexer,\n  });\n\n  txSkeleton = await sudt.issueToken(txSkeleton, sender, BigInt(amount));\n  txSkeleton = await common.payFee(txSkeleton, [sender], BigInt(txFee));\n  txSkeleton = await common.prepareSigningEntries(txSkeleton);\n\n  return txSkeleton;\n')),Object(a.b)("h2",{id:"transfer-sudt"},"Transfer SUDT"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"  const { sender, recipient, udtHash, amount, txFee } = params;\n\n  let txSkeleton = TransactionSkeleton({\n    // @ts-ignore\n    cellProvider: indexer,\n  });\n\n  txSkeleton = await sudt.transfer(\n    txSkeleton,\n    [sender],\n    udtHash,\n    recipient,\n    BigInt(amount)\n  );\n\n  txSkeleton = await common.payFee(txSkeleton, [sender], BigInt(txFee));\n  txSkeleton = await common.prepareSigningEntries(txSkeleton);\n\n  return txSkeleton;\n")))}u.isMDXComponent=!0}}]);