(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),c=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var b=c.a.createContext({}),p=function(e){var t=c.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return c.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(o,".").concat(d)]||u[d]||s[d]||r;return n?c.a.createElement(f,i(i({ref:t},b),{},{components:n})):c.a.createElement(f,i({ref:t},b))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var b=2;b<r;b++)o[b]=n[b];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),c=n(7),r=(n(0),n(110)),o={id:"createaccount",title:"Create an Account for CKB Transactions"},i={unversionedId:"tutorials/createaccount",id:"tutorials/createaccount",isDocsHomePage:!1,title:"Create an Account for CKB Transactions",description:"Introduction",source:"@site/docs\\tutorials\\account.md",slug:"/tutorials/createaccount",permalink:"/lumos_doc/docs/tutorials/createaccount",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/tutorials/account.md",version:"current",sidebar:"someSidebar",previous:{title:"Set Up the Database",permalink:"/lumos_doc/docs/tutorials/database"},next:{title:"Query on Cells",permalink:"/lumos_doc/docs/tutorials/cells"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Create an Account by Using ckb-cli",id:"create-an-account-by-using-ckb-cli",children:[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Step 1. Create an account.",id:"step-1-create-an-account",children:[]},{value:"Step 2. Get the private key of the account.",id:"step-2-get-the-private-key-of-the-account",children:[]}]},{value:"Create an Account by Using the HD Wallet Manager",id:"create-an-account-by-using-the-hd-wallet-manager",children:[{value:"Prerequisites",id:"prerequisites-1",children:[]},{value:"Step 1. Create an extended private key.",id:"step-1-create-an-extended-private-key",children:[]},{value:"Step 2. Open a new terminal and import the private key to create a new account.",id:"step-2-open-a-new-terminal-and-import-the-private-key-to-create-a-new-account",children:[]}]},{value:"Get CKB Capacity for the Account",id:"get-ckb-capacity-for-the-account",children:[{value:"Get CKB Capacity for the Account on DEV Chain",id:"get-ckb-capacity-for-the-account-on-dev-chain",children:[]},{value:"Get CKB Capacity for the Account on Testnet",id:"get-ckb-capacity-for-the-account-on-testnet",children:[]}]},{value:"Check the Capacity of an Account",id:"check-the-capacity-of-an-account",children:[]}],b={toc:l};function p(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"introduction"},"Introduction"),Object(r.b)("p",null,"A CKB account is represented as a set of cells (a collection of cells of a lock script). That means a CKB account can be created by creating a lock script."),Object(r.b)("p",null,"This guide introduces how to generate a new account with enough CKB capacity that can be used for developing and testing operations."),Object(r.b)("p",null,"The following methods are described in this guide:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Create an account by using ckb-cli. "),Object(r.b)("li",{parentName:"ul"},"Create an account by using the HD wallet manager."),Object(r.b)("li",{parentName:"ul"},"Get the CKB capacity for an account."),Object(r.b)("li",{parentName:"ul"},"Check the capacity of an account.")),Object(r.b)("h2",{id:"create-an-account-by-using-ckb-cli"},"Create an Account by Using ckb-cli"),Object(r.b)("p",null,"ckb-cli is in the CKB pre-built installer package. If the CKB node is installed by using Tippy, download the pre-built installer package, for example, ckb_v0.39.0_x86_64-unknown-linux-gnu.tar.gz, to get the ckb-cli tool."),Object(r.b)("h3",{id:"prerequisites"},"Prerequisites"),Object(r.b)("p",null,"The following prerequisites apply for creating an account by using ckb-cli:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The CKB node is running."),Object(r.b)("li",{parentName:"ul"},"ckb-cli is installed.")),Object(r.b)("h3",{id:"step-1-create-an-account"},"Step 1. Create an account."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ ckb-cli account new\nYour new account is locked with a password. Please give a password. Do not forget this password.\nPassword: \nRepeat password: \naddress:\n  mainnet: ckb1qyqzz2az9emgl7runavw3tul22gd4qs5ueqs68fy9e\n  testnet: ckt1qyqzz2az9emgl7runavw3tul22gd4qs5ueqs8zhmf9\nlock_arg: 0x212ba22e768ff87c9f58e8af9f5290da8214e641\nlock_hash: 0x85aa4381b04366e88a10fb9519db99b0993bea7ee0ce67c099e5b627538cd212\n")),Object(r.b)("h3",{id:"step-2-get-the-private-key-of-the-account"},"Step 2. Get the private key of the account."),Object(r.b)("p",null,"Sometimes private keys are required in the development or testing process."),Object(r.b)("p",null,"To get the private key by using ckb-cli:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'$ ckb-cli account export --extended-privkey-path wallet --lock-arg 0x212ba22e768ff87c9f58e8af9f5290da8214e641\nPassword: \nmessage: "Success exported account as extended privkey to: \\"wallet\\", please use this file carefully"\n')),Object(r.b)("p",null,"The extended private key is exported to the wallet file. The first line in the file is the private key of the account. "),Object(r.b)("p",null,"The second line is the chain code."),Object(r.b)("h2",{id:"create-an-account-by-using-the-hd-wallet-manager"},"Create an Account by Using the HD Wallet Manager"),Object(r.b)("p",null,"The HD wallet manager supports to generate extended private keys (",Object(r.b)("inlineCode",{parentName:"p"},"privateKey")," and ",Object(r.b)("inlineCode",{parentName:"p"},"chaincode"),"). The ",Object(r.b)("inlineCode",{parentName:"p"},"privateKey")," can be used to create accounts on chain. "),Object(r.b)("h3",{id:"prerequisites-1"},"Prerequisites"),Object(r.b)("p",null,"The following prerequisites apply for creating an account by using the HD wallet manager:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The HD package (@ckb-lumos/hd) is installed in a Node project.")),Object(r.b)("h3",{id:"step-1-create-an-extended-private-key"},"Step 1. Create an extended private key."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'$ cd mydapp\n$ cat <<EOF > config.json\n{\n  "PREFIX": "ckt",\n  "SCRIPTS": {\n    "SECP256K1_BLAKE160": {\n      "CODE_HASH": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n      "HASH_TYPE": "type",\n      "TX_HASH": "0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708",\n      "INDEX": "0x0",\n      "DEP_TYPE": "dep_group",\n      "SHORT_ID": 0\n    },\n    "SECP256K1_BLAKE160_MULTISIG": {\n      "CODE_HASH": "0x5c5069eb0857efc65e1bca0c07df34c31663b3622fd3876c876320fc9634e2a8",\n      "HASH_TYPE": "type",\n      "TX_HASH": "0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708",\n      "INDEX": "0x1",\n      "DEP_TYPE": "dep_group",\n      "SHORT_ID": 1\n    },\n    "DAO": {\n      "CODE_HASH": "0x82d76d1b75fe2fd9a27dfbaa65a039221a380d76c926f378d3f81cf3e7e13f2e",\n      "HASH_TYPE": "type",\n      "TX_HASH": "0xa563884b3686078ec7e7677a5f86449b15cf2693f3c1241766c6996f206cc541",\n      "INDEX": "0x2",\n      "DEP_TYPE": "code"\n    }\n  }\n}\nEOF\n$ LUMOS_CONFIG_FILE="config.json" node --experimental-repl-await\nWelcome to Node.js v14.16.0.\nType ".help" for more information.\n> const { initializeConfig, getConfig } = require("@ckb-lumos/config-manager");\n> initializeConfig();\n> const { mnemonic, ExtendedPrivateKey } = require("@ckb-lumos/hd");\n> const m = mnemonic.generateMnemonic();\n> const seed = mnemonic.mnemonicToSeedSync(m);\n> const extendedPrivateKey = ExtendedPrivateKey.fromSeed(seed);\n> console.log(extendedPrivateKey);\nExtendedPrivateKey {\n  privateKey: \'0x143f8236e711b972a34e9e44795494fa4e65aba2bd3abee2f3c572f945091485\',\n  chainCode: \'0x9bbf03c1de73889ef34b7645b31ecac124268a6e4f5cabc26dcb4fb2c9fb06ef\'\n}\n')),Object(r.b)("h3",{id:"step-2-open-a-new-terminal-and-import-the-private-key-to-create-a-new-account"},"Step 2. Open a new terminal and import the private key to create a new account."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"$ echo 0x8a4cb53f641ee8df90cf5bc5204574744657a091dfe41c98069aa4e41ed9c86b > pk\n$ export TOP=$(pwd)\n$ export PATH=$PATH:$TOP/ckb_v0.40.0-rc1_x86_64-unknown-centos-gnu\n$ ckb-cli account import --privkey-path pk\nPassword:\naddress:\n  mainnet: ckb1qyqv6dfjmelhmrej2g5ju2d4994xkd462d5sqwfdxt\n  testnet: ckt1qyqv6dfjmelhmrej2g5ju2d4994xkd462d5sathj2h\nlock_arg: 0xcd3532de7f7d8f3252292e29b5296a6b36ba5369\n")),Object(r.b)("h2",{id:"get-ckb-capacity-for-the-account"},"Get CKB Capacity for the Account"),Object(r.b)("p",null,"This step is to set up the miner account for receive mining rewards (CKB capacity) that can be used for developing and testing purpose."),Object(r.b)("h3",{id:"get-ckb-capacity-for-the-account-on-dev-chain"},"Get CKB Capacity for the Account on DEV Chain"),Object(r.b)("p",null,"If you are running a ",Object(r.b)("strong",{parentName:"p"},"DEV chain"),", specify the miner account for receiving mining rewards. "),Object(r.b)("p",null,"The process to specify the miner account for the node installed manually is different from the process for the node installed by Tippy."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"If the CKB node is installed by Tippy, specify ",Object(r.b)("strong",{parentName:"p"},"Block Assembler Lock Arg")," in the Edit Chain form with the ",Object(r.b)("inlineCode",{parentName:"p"},"lock_arg")," of the account.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"If the CKB node is installed manually, specify the ",Object(r.b)("inlineCode",{parentName:"p"},"args")," in the ",Object(r.b)("inlineCode",{parentName:"p"},"block_assembler")," section in ckb.toml with the ",Object(r.b)("inlineCode",{parentName:"p"},"lock_arg")," of the account."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'$ ed devnet/ckb.toml <<EOF\n143a\n[block_assembler]\ncode_hash = "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8"\nargs = "0x212ba22e768ff87c9f58e8af9f5290da8214e641"\nhash_type = "type"\nmessage = "0x"\n.\nwq\nEOF\n')))),Object(r.b)("p",null,"After the miner account is specified, restart the CKB node and start the CKB miner."),Object(r.b)("p",null,"To start the CKB miner in a different terminal:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"$ export TOP=$(pwd)\n$ export PATH=$PATH:$TOP/ckb_v0.40.0_x86_64-unknown-linux-gnu.tar.gz\n$ ckb miner -C devnet\n")),Object(r.b)("h3",{id:"get-ckb-capacity-for-the-account-on-testnet"},"Get CKB Capacity for the Account on Testnet"),Object(r.b)("p",null,"If you are running a ",Object(r.b)("strong",{parentName:"p"},"Testnet")," node, go to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://faucet.nervos.org"}),"https://faucet.nervos.org")," and paste the account address in the address inputbox, then click the Claim button."),Object(r.b)("p",null,"50,000 CKB can be claimed for each Testnet address from the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://faucet.nervos.org/"}),"faucet")," per 24 hours. "),Object(r.b)("h2",{id:"check-the-capacity-of-an-account"},"Check the Capacity of an Account"),Object(r.b)("p",null,"To check the capacity of the account by running ",Object(r.b)("inlineCode",{parentName:"p"},"ckb-cli wallet get-capacity --address <the Testnet address of the account>"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'$ ckb-cli wallet get-capacity --address "ckt1qyqzz2az9emgl7runavw3tul22gd4qs5ueqs8zhmf9"\nimmature: 8039065.13953246 (CKB)\ntotal: 38186544.69769654 (CKB)\n')))}p.isMDXComponent=!0}}]);