(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),b=r,h=d["".concat(l,".").concat(b)]||d[b]||p[b]||c;return n?a.a.createElement(h,o(o({ref:t},s),{},{components:n})):a.a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,l=new Array(c);l[0]=b;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<c;s++)l[s]=n[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),c=(n(0),n(104)),l={id:"hdcache",title:"HD Cache Manager"},o={unversionedId:"package/hdcache",id:"package/hdcache",isDocsHomePage:!1,title:"HD Cache Manager",description:"The HD cache manager builds a memory cache for derived addresses and live cells of these addresses.",source:"@site/docs\\package\\hd-cache.md",slug:"/package/hdcache",permalink:"/lumos_doc/docs/package/hdcache",editUrl:"https://github.com/xying21/lumos_doc/tree/master/docs/package/hd-cache.md",version:"current",sidebar:"someSidebar",previous:{title:"HD Wallet Manager",permalink:"/lumos_doc/docs/package/hd"},next:{title:"Transaction Manager",permalink:"/lumos_doc/docs/package/transactionmanager"}},i=[{value:"Examples",id:"examples",children:[{value:"Sync Cache from Indexer",id:"sync-cache-from-indexer",children:[]},{value:"Get Master Public Key",id:"get-master-public-key",children:[]},{value:"Collect Cells",id:"collect-cells",children:[]},{value:"Get the HD Wallet Balance",id:"get-the-hd-wallet-balance",children:[]}]}],s={toc:i};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The HD cache manager builds a memory cache for derived addresses and live cells of these addresses."),Object(c.b)("h2",{id:"examples"},"Examples"),Object(c.b)("h3",{id:"sync-cache-from-indexer"},"Sync Cache from Indexer"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'const { CacheManager, CellCollector, CellCollectorWithQueryOptions, getBalance } = require("@ckb-lumos/hd-cache")\nconst { Indexer } = require("@ckb-lumos/indexer")\nconst indexer = new Indexer("http://localhost:8114", "./indexer-data")\nconst cacheManger = CacheManager.loadFromKeystore(indexer, "You keystore path", "You password")\n// start to sync cache from indexer\ncacheManager.startForever()\n')),Object(c.b)("h3",{id:"get-master-public-key"},"Get Master Public Key"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"// if your keystore is from ckb-cli or you set needMasterPublicKey to true, you can get you master public key info by\ncacheManager.getMasterPublicKeyInfo() // ckb-cli using this key by default\n\n// now you can use the following methods\ncacheManager.getNextReceivingPublicKeyInfo()\ncacheManager.getNextChangePublicKeyInfo()\n")),Object(c.b)("h3",{id:"collect-cells"},"Collect Cells"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"// collect cells  by CellCollectors\nconst cellCollector = new CellCollector(cacheManager)\n// or with queryOptions\nconst cellCollector = new CellCollectorWithQueryOptions(\n  new CellCollector(cacheManger),\n  queryOptions,\n)\n\nfor await (const cell of cellCollector.collect()) {\n  console.log(cell)\n}\n")),Object(c.b)("h3",{id:"get-the-hd-wallet-balance"},"Get the HD Wallet Balance"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"// get HD wallet balance\nawait getBalance(cellCollector)\n")))}u.isMDXComponent=!0}}]);